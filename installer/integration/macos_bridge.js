/**
 * macOS-specific bridge for Bitcoin Solo Miner Monitor Installer
 * 
 * This module provides communication between the Electron wizard and the macOS DMG installer.
 */

const { spawn, exec } = require('child_process');
const path = require('path');
const fs = require('fs');
const os = require('os');

/**
 * Launch DMG installer with parameters from Electron wizard
 * 
 * @param {Object} config - Configuration object from the wizard
 * @returns {Promise} - Promise that resolves when installation is complete
 */
async function launchDMGInstaller(config) {
  return new Promise((resolve, reject) => {
    try {
      // Create a temporary file to store the configuration
      const tempConfigPath = path.join(os.tmpdir(), 'bsmm_installer_config.json');
      
      // Write configuration to temp file
      fs.writeFileSync(tempConfigPath, JSON.stringify(config, null, 2));
      
      // Get path to DMG installer
      const installerPath = path.join(__dirname, '..', 'macos', 'BitcoinSoloMinerMonitor.dmg');
      
      // Check if installer exists
      if (!fs.existsSync(installerPath)) {
        throw new Error(`DMG installer not found at ${installerPath}`);
      }
      
      // Create a temporary directory for mounting the DMG
      const mountPoint = path.join(os.tmpdir(), 'bsmm_dmg_mount');
      try {
        fs.mkdirSync(mountPoint, { recursive: true });
      } catch (err) {
        if (err.code !== 'EEXIST') throw err;
      }
      
      // Mount the DMG
      exec(`hdiutil attach "${installerPath}" -mountpoint "${mountPoint}"`, (error) => {
        if (error) {
          reject(new Error(`Failed to mount DMG: ${error.message}`));
          return;
        }
        
        // Create post-installation script with configuration
        const postInstallScript = `#!/bin/bash
# This script is generated by the Electron installer wizard

# Create application support directory
mkdir -p "${config.dataDir}"

# Set up first run configuration
mkdir -p "/Applications/Bitcoin Solo Miner Monitor.app/Contents/Resources/config"
cat > "/Applications/Bitcoin Solo Miner Monitor.app/Contents/Resources/config/first_run.ini" << CONFIG
[NetworkDiscovery]
Enabled=${config.autoDiscovery ? 1 : 0}
Range=${config.networkRange}

[Installation]
InstallDir=${config.installDir}
DataDir=${config.dataDir}
CreateDesktopShortcut=${config.createDesktopShortcut ? 1 : 0}
StartOnBoot=${config.startOnBoot ? 1 : 0}

[Components]
Core=1
Database=${config.components?.database ? 1 : 0}
Dashboard=${config.components?.dashboard ? 1 : 0}
Alert=${config.components?.alert ? 1 : 0}
API=${config.components?.api ? 1 : 0}
Documentation=${config.components?.docs ? 1 : 0}
CONFIG

# Set up LaunchAgent for auto-start
if [ ${config.startOnBoot ? 1 : 0} -eq 1 ]; then
  mkdir -p "$HOME/Library/LaunchAgents"
  cat > "$HOME/Library/LaunchAgents/com.bitcoinsolominormonitor.plist" << PLIST
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>Label</key>
    <string>com.bitcoinsolominormonitor</string>
    <key>ProgramArguments</key>
    <array>
        <string>/Applications/Bitcoin Solo Miner Monitor.app/Contents/MacOS/BitcoinSoloMinerMonitor</string>
        <string>--minimized</string>
    </array>
    <key>RunAtLoad</key>
    <true/>
    <key>KeepAlive</key>
    <false/>
</dict>
</plist>
PLIST

  # Set execute permissions
  chmod +x "$HOME/Library/LaunchAgents/com.bitcoinsolominormonitor.plist"
fi

echo "Post-installation setup completed."
`;
        
        // Write the post-installation script to a temporary file
        const postInstallPath = path.join(os.tmpdir(), 'bsmm_post_install.sh');
        fs.writeFileSync(postInstallPath, postInstallScript);
        fs.chmodSync(postInstallPath, '755');
        
        // Copy the application to the Applications folder
        exec(`cp -R "${mountPoint}/Bitcoin Solo Miner Monitor.app" /Applications/`, (error) => {
          if (error) {
            // Unmount the DMG
            exec(`hdiutil detach "${mountPoint}" -force`, () => {});
            reject(new Error(`Failed to copy application: ${error.message}`));
            return;
          }
          
          // Run the post-installation script
          exec(`"${postInstallPath}"`, (error) => {
            // Unmount the DMG
            exec(`hdiutil detach "${mountPoint}" -force`, () => {});
            
            // Clean up temporary files
            try {
              fs.unlinkSync(tempConfigPath);
              fs.unlinkSync(postInstallPath);
            } catch (err) {
              console.warn('Could not remove temp files:', err.message);
            }
            
            if (error) {
              reject(new Error(`Failed to run post-installation script: ${error.message}`));
            } else {
              resolve({ success: true });
            }
          });
        });
      });
    } catch (error) {
      reject(error);
    }
  });
}

/**
 * Update the macOS DMG creation script to include the Electron wizard configuration
 * 
 * @param {string} scriptPath - Path to the DMG creation script
 * @returns {Promise} - Promise that resolves when the script is updated
 */
async function updateDMGScript(scriptPath) {
  try {
    // Read the DMG creation script
    const script = await fs.promises.readFile(scriptPath, 'utf8');
    
    // Update the script to include the Electron wizard configuration
    const updatedScript = script
      // Add support for configuration file
      .replace(
        '# Create post-installation script that will be run after the app is installed',
        `# Check for configuration file
if [ -n "$1" ] && [ -f "$1" ]; then
  CONFIG_FILE="$1"
  echo "Using configuration file: $CONFIG_FILE"
  
  # Extract configuration values
  NETWORK_DISCOVERY_ENABLED=$(grep -A 1 "\\[NetworkDiscovery\\]" "$CONFIG_FILE" | grep "Enabled" | cut -d= -f2)
  NETWORK_RANGE=$(grep -A 2 "\\[NetworkDiscovery\\]" "$CONFIG_FILE" | grep "Range" | cut -d= -f2)
  
  # Extract component selections
  COMPONENT_DATABASE=$(grep -A 6 "\\[Components\\]" "$CONFIG_FILE" | grep "Database" | cut -d= -f2)
  COMPONENT_DASHBOARD=$(grep -A 6 "\\[Components\\]" "$CONFIG_FILE" | grep "Dashboard" | cut -d= -f2)
  COMPONENT_ALERT=$(grep -A 6 "\\[Components\\]" "$CONFIG_FILE" | grep "Alert" | cut -d= -f2)
  COMPONENT_API=$(grep -A 6 "\\[Components\\]" "$CONFIG_FILE" | grep "API" | cut -d= -f2)
  COMPONENT_DOCS=$(grep -A 6 "\\[Components\\]" "$CONFIG_FILE" | grep "Documentation" | cut -d= -f2)
else
  # Default values
  NETWORK_DISCOVERY_ENABLED=1
  NETWORK_RANGE="192.168.1.0/24"
  COMPONENT_DATABASE=1
  COMPONENT_DASHBOARD=1
  COMPONENT_ALERT=1
  COMPONENT_API=1
  COMPONENT_DOCS=1
fi

# Create post-installation script that will be run after the app is installed`
      )
      // Update the first_run.ini creation
      .replace(
        'cat <<CONFIG > "/Applications/${APP_NAME}.app/Contents/Resources/config/first_run.ini"\n[NetworkDiscovery]\nEnabled=1\nRange=192.168.1.0/24\nCONFIG',
        `cat <<CONFIG > "/Applications/\${APP_NAME}.app/Contents/Resources/config/first_run.ini"
[NetworkDiscovery]
Enabled=\${NETWORK_DISCOVERY_ENABLED}
Range=\${NETWORK_RANGE}

[Components]
Core=1
Database=\${COMPONENT_DATABASE}
Dashboard=\${COMPONENT_DASHBOARD}
Alert=\${COMPONENT_ALERT}
API=\${COMPONENT_API}
Documentation=\${COMPONENT_DOCS}
CONFIG`
      );
    
    // Write the updated script
    await fs.promises.writeFile(scriptPath, updatedScript);
    
    return { success: true };
  } catch (error) {
    console.error(`Error updating DMG script: ${error.message}`);
    throw error;
  }
}

module.exports = {
  launchDMGInstaller,
  updateDMGScript
};