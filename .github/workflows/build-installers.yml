name: Build Installers

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., 1.0.0)'
        required: false
        default: 'dev-build'

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  build-windows:
    runs-on: windows-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Determine version
      id: version
      run: |
        if ("${{ github.event_name }}" -eq "push" -and "${{ github.ref }}" -like "refs/tags/v*") {
          $version = "${{ github.ref }}" -replace "refs/tags/v", ""
        } elseif ("${{ github.event.inputs.version }}" -ne "") {
          $version = "${{ github.event.inputs.version }}"
        } else {
          $version = "dev-${{ github.sha }}"
        }
        echo "version=$version" >> $env:GITHUB_OUTPUT
        echo "Building version: $version"
      shell: powershell
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install NSIS
      run: |
        choco install nsis -y
        echo "C:\Program Files (x86)\NSIS" >> $env:GITHUB_PATH
      shell: powershell
      
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Install Node.js dependencies
      run: npm ci
      
    - name: Build frontend
      run: |
        if (Test-Path "src/frontend") {
          cd src/frontend
          npm ci
          npm run build
        } else {
          echo "Frontend directory not found, skipping frontend build"
        }
      
    - name: Create Windows installer
      run: |
        python scripts/create-distribution.py --platform windows --version ${{ steps.version.outputs.version }}
      shell: powershell
      
    - name: Generate checksums
      run: |
        $files = Get-ChildItem -Path "distribution\windows\*.exe"
        foreach ($file in $files) {
          $hash = Get-FileHash -Path $file.FullName -Algorithm SHA256
          "$($hash.Hash.ToLower())  $($file.Name)" | Out-File -Append -FilePath "distribution\windows\SHA256SUMS" -Encoding utf8
        }
      shell: powershell
      
    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-installer
        path: |
          distribution/windows/*.exe
          distribution/windows/SHA256SUMS
        retention-days: 30

  build-macos:
    runs-on: macos-latest
    needs: build-windows
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Install Node.js dependencies
      run: npm ci
      
    - name: Build frontend
      run: |
        if [ -d "src/frontend" ]; then
          cd src/frontend
          npm ci
          npm run build
        else
          echo "Frontend directory not found, skipping frontend build"
        fi
      
    - name: Create macOS installer
      run: |
        python scripts/create-distribution.py --platform macos --version ${{ needs.build-windows.outputs.version }}
      
    - name: Generate checksums
      run: |
        echo "üîê Generating comprehensive checksums for macOS artifacts..."
        cd distribution/macos
        
        # Generate SHA256 checksums
        if ls *.dmg 1> /dev/null 2>&1; then
          shasum -a 256 *.dmg > SHA256SUMS
          echo "‚úÖ SHA256 checksums generated"
          
          # Also generate MD5 for additional verification
          md5 *.dmg > MD5SUMS 2>/dev/null || true
          
          # Display checksums for verification
          echo "üìã Generated checksums:"
          cat SHA256SUMS
          
          # Verify the checksums immediately
          echo "üîç Verifying generated checksums..."
          if shasum -a 256 -c SHA256SUMS; then
            echo "‚úÖ Checksum verification passed"
          else
            echo "‚ùå Checksum verification failed"
            exit 1
          fi
        else
          echo "‚ùå No DMG files found to checksum"
          exit 1
        fi
      
    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: macos-installer
        path: |
          distribution/macos/*.dmg
          distribution/macos/SHA256SUMS
          distribution/macos/MD5SUMS
        retention-days: 30

  build-linux:
    runs-on: ubuntu-latest
    needs: build-windows
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential python3-dev rpm
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Install Node.js dependencies
      run: npm ci
      
    - name: Build frontend
      run: |
        if [ -d "src/frontend" ]; then
          cd src/frontend
          npm ci
          npm run build
        else
          echo "Frontend directory not found, skipping frontend build"
        fi
      
    - name: Create Linux packages
      run: |
        python scripts/create-distribution.py --platform linux --version ${{ needs.build-windows.outputs.version }}
      
    - name: Generate checksums
      run: |
        cd distribution/linux
        sha256sum *.deb *.rpm *.AppImage > SHA256SUMS 2>/dev/null || true
      
    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-packages
        path: |
          distribution/linux/*.deb
          distribution/linux/*.rpm
          distribution/linux/*.AppImage
          distribution/linux/SHA256SUMS
        retention-days: 30

  validate-macos:
    needs: [build-macos]
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download macOS artifacts
      uses: actions/download-artifact@v4
      with:
        name: macos-installer
        path: artifacts/
        
    - name: Validate macOS DMG structure
      run: |
        echo "üîç Running comprehensive macOS DMG validation..."
        
        dmg_file=$(find artifacts -name "*.dmg" | head -1)
        if [ -z "$dmg_file" ]; then
          echo "‚ùå No DMG file found"
          exit 1
        fi
        
        echo "üìÅ Validating DMG: $(basename "$dmg_file")"
        
        # Check DMG file size (should be reasonable)
        dmg_size=$(stat -f%z "$dmg_file" 2>/dev/null || echo "0")
        echo "üìè DMG size: $dmg_size bytes"
        
        if [ "$dmg_size" -lt 10000000 ]; then  # Less than 10MB might be too small
          echo "‚ö†Ô∏è  Warning: DMG seems small ($dmg_size bytes)"
        fi
        
        if [ "$dmg_size" -gt 500000000 ]; then  # More than 500MB might be too large
          echo "‚ö†Ô∏è  Warning: DMG seems large ($dmg_size bytes)"
        fi
        
        # Verify checksum file exists and is valid
        checksum_file=$(find artifacts -name "SHA256SUMS" | head -1)
        if [ -n "$checksum_file" ]; then
          echo "üîê Verifying checksum..."
          cd "$(dirname "$checksum_file")"
          if shasum -a 256 -c SHA256SUMS; then
            echo "‚úÖ Checksum verification passed"
          else
            echo "‚ùå Checksum verification failed"
            exit 1
          fi
          cd - > /dev/null
        else
          echo "‚ùå No checksum file found"
          exit 1
        fi
        
        # Mount and perform detailed validation
        mount_point="/tmp/validate_mount_$(date +%s)"
        echo "üíæ Mounting DMG at $mount_point..."
        
        if ! hdiutil attach "$dmg_file" -mountpoint "$mount_point" -readonly -nobrowse; then
          echo "‚ùå Failed to mount DMG"
          exit 1
        fi
        
        # Validate DMG contents
        app_bundle="$mount_point/Bitcoin Solo Miner Monitor.app"
        
        echo "üîç Performing detailed app bundle validation..."
        
        # Check bundle identifier
        bundle_id=$(plutil -extract CFBundleIdentifier raw "$app_bundle/Contents/Info.plist" 2>/dev/null || echo "unknown")
        echo "üÜî Bundle ID: $bundle_id"
        
        # Check minimum system version
        min_version=$(plutil -extract LSMinimumSystemVersion raw "$app_bundle/Contents/Info.plist" 2>/dev/null || echo "unknown")
        echo "üñ•Ô∏è  Minimum macOS version: $min_version"
        
        # Validate executable architecture
        executable="$app_bundle/Contents/MacOS/BitcoinSoloMinerMonitor"
        if [ -f "$executable" ]; then
          echo "üèóÔ∏è  Checking executable architecture..."
          file "$executable"
          
          # Check if it's a script or binary
          if file "$executable" | grep -q "shell script"; then
            echo "‚úÖ Executable is a shell script (expected for Python app)"
            
            # Validate shell script syntax
            if bash -n "$executable"; then
              echo "‚úÖ Shell script syntax is valid"
            else
              echo "‚ùå Shell script has syntax errors"
              hdiutil detach "$mount_point" || true
              exit 1
            fi
          else
            echo "‚ÑπÔ∏è  Executable is not a shell script"
          fi
        fi
        
        # Check for Python dependencies structure
        echo "üêç Checking Python environment setup..."
        if [ -d "$app_bundle/Contents/Resources/site-packages" ]; then
          echo "‚úÖ Site-packages directory found"
          package_count=$(find "$app_bundle/Contents/Resources/site-packages" -maxdepth 1 -type d | wc -l)
          echo "üì¶ Found $package_count package directories"
        else
          echo "‚ö†Ô∏è  Site-packages directory not found (dependencies may be handled differently)"
        fi
        
        # Check for Python framework
        if [ -d "$app_bundle/Contents/Frameworks/Python.framework" ]; then
          echo "‚úÖ Python framework found in bundle"
        else
          echo "‚ÑπÔ∏è  No bundled Python framework (may use system Python)"
        fi
        
        # Validate application resources
        echo "üìö Checking application resources..."
        resources_dir="$app_bundle/Contents/Resources"
        
        essential_files=("run.py" "src" "config")
        for file in "${essential_files[@]}"; do
          if [ -e "$resources_dir/$file" ]; then
            echo "‚úÖ Found: $file"
          else
            echo "‚ö†Ô∏è  Missing: $file"
          fi
        done
        
        # Check for icon file
        if [ -f "$app_bundle/Contents/Resources/app_icon.icns" ]; then
          echo "‚úÖ App icon found (ICNS format)"
        elif [ -f "$app_bundle/Contents/Resources/app_icon.png" ]; then
          echo "‚úÖ App icon found (PNG format)"
        else
          echo "‚ö†Ô∏è  No app icon found"
        fi
        
        # Test DMG user experience elements
        echo "üë§ Checking user experience elements..."
        
        if [ -L "$mount_point/Applications" ]; then
          echo "‚úÖ Applications symlink present"
          if [ "$(readlink "$mount_point/Applications")" = "/Applications" ]; then
            echo "‚úÖ Applications symlink points to correct location"
          else
            echo "‚ùå Applications symlink points to wrong location"
            hdiutil detach "$mount_point" || true
            exit 1
          fi
        else
          echo "‚ùå Applications symlink missing"
          hdiutil detach "$mount_point" || true
          exit 1
        fi
        
        if [ -f "$mount_point/Installation Instructions.txt" ]; then
          echo "‚úÖ Installation instructions present"
          # Check if instructions are not empty
          if [ -s "$mount_point/Installation Instructions.txt" ]; then
            echo "‚úÖ Installation instructions are not empty"
          else
            echo "‚ö†Ô∏è  Installation instructions file is empty"
          fi
        else
          echo "‚ö†Ô∏è  Installation instructions missing"
        fi
        
        # Check for background image
        if [ -f "$mount_point/.background/background.png" ]; then
          echo "‚úÖ DMG background image found"
        else
          echo "‚ÑπÔ∏è  No custom DMG background image"
        fi
        
        # Unmount DMG
        echo "üì§ Unmounting DMG..."
        if ! hdiutil detach "$mount_point"; then
          echo "‚ö†Ô∏è  Warning: Could not unmount cleanly, forcing..."
          hdiutil detach "$mount_point" -force || true
        fi
        
        echo "‚úÖ macOS DMG validation completed successfully"
        
    - name: Test macOS system integration
      run: |
        echo "üîß Testing macOS system integration capabilities..."
        
        # Test Spotlight indexing compatibility
        echo "üîç Checking Spotlight compatibility..."
        dmg_file=$(find artifacts -name "*.dmg" | head -1)
        mount_point="/tmp/spotlight_test_$(date +%s)"
        
        hdiutil attach "$dmg_file" -mountpoint "$mount_point" -readonly -nobrowse
        app_bundle="$mount_point/Bitcoin Solo Miner Monitor.app"
        
        # Check if mdls can read the bundle metadata
        if mdls "$app_bundle" >/dev/null 2>&1; then
          echo "‚úÖ App bundle is Spotlight compatible"
        else
          echo "‚ö†Ô∏è  App bundle may have Spotlight indexing issues"
        fi
        
        # Test Launch Services compatibility
        echo "üöÄ Checking Launch Services compatibility..."
        if /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/Support/lsregister -dump | grep -q "Bitcoin Solo Miner Monitor" 2>/dev/null; then
          echo "‚ÑπÔ∏è  App may already be registered with Launch Services"
        else
          echo "‚ÑπÔ∏è  App not currently registered with Launch Services (normal for testing)"
        fi
        
        hdiutil detach "$mount_point" || true
        
        echo "‚úÖ macOS system integration tests completed"

  test-installers:
    needs: [build-windows, build-macos, build-linux, validate-macos]
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
        
    - name: Test Windows installer
      if: matrix.os == 'windows-latest'
      run: |
        $installer = Get-ChildItem -Path "artifacts\windows-installer\*.exe" | Select-Object -First 1
        if ($installer) {
          echo "Testing Windows installer: $($installer.Name)"
          # Test installer in silent mode
          Start-Process -FilePath $installer.FullName -ArgumentList "/S" -Wait -NoNewWindow
          # Verify installation
          if (Test-Path "C:\Program Files\Bitcoin Solo Miner Monitor\BitcoinSoloMinerMonitor.exe") {
            echo "‚úì Windows installer test passed"
          } else {
            echo "‚úó Windows installer test failed"
            exit 1
          }
        }
      shell: powershell
      
    - name: Test macOS installer
      if: matrix.os == 'macos-latest'
      run: |
        dmg_file=$(find artifacts/macos-installer -name "*.dmg" | head -1)
        if [ -n "$dmg_file" ]; then
          echo "üçé Testing macOS installer: $(basename "$dmg_file")"
          
          # Verify DMG file integrity
          echo "üìã Verifying DMG integrity..."
          if ! hdiutil verify "$dmg_file"; then
            echo "‚ùå DMG integrity check failed"
            exit 1
          fi
          echo "‚úÖ DMG integrity verified"
          
          # Mount DMG and verify contents
          echo "üíæ Mounting DMG for content verification..."
          mount_point="/tmp/test_mount_$(date +%s)"
          if ! hdiutil attach "$dmg_file" -mountpoint "$mount_point" -readonly; then
            echo "‚ùå Failed to mount DMG"
            exit 1
          fi
          
          # Verify app bundle structure
          app_bundle="$mount_point/Bitcoin Solo Miner Monitor.app"
          if [ ! -d "$app_bundle" ]; then
            echo "‚ùå App bundle not found in DMG"
            hdiutil detach "$mount_point" || true
            exit 1
          fi
          echo "‚úÖ App bundle found: $app_bundle"
          
          # Verify essential app bundle components
          echo "üîç Verifying app bundle structure..."
          
          # Check Info.plist
          if [ ! -f "$app_bundle/Contents/Info.plist" ]; then
            echo "‚ùå Info.plist missing"
            hdiutil detach "$mount_point" || true
            exit 1
          fi
          echo "‚úÖ Info.plist found"
          
          # Check executable
          if [ ! -f "$app_bundle/Contents/MacOS/BitcoinSoloMinerMonitor" ]; then
            echo "‚ùå Main executable missing"
            hdiutil detach "$mount_point" || true
            exit 1
          fi
          
          # Verify executable permissions
          if [ ! -x "$app_bundle/Contents/MacOS/BitcoinSoloMinerMonitor" ]; then
            echo "‚ùå Main executable not executable"
            hdiutil detach "$mount_point" || true
            exit 1
          fi
          echo "‚úÖ Main executable found and executable"
          
          # Check Resources directory
          if [ ! -d "$app_bundle/Contents/Resources" ]; then
            echo "‚ùå Resources directory missing"
            hdiutil detach "$mount_point" || true
            exit 1
          fi
          echo "‚úÖ Resources directory found"
          
          # Verify essential application files
          if [ ! -f "$app_bundle/Contents/Resources/run.py" ]; then
            echo "‚ùå Main Python script (run.py) missing"
            hdiutil detach "$mount_point" || true
            exit 1
          fi
          echo "‚úÖ Main Python script found"
          
          # Check for requirements.txt
          if [ ! -f "$app_bundle/Contents/Resources/requirements.txt" ]; then
            echo "‚ö†Ô∏è  requirements.txt missing (may be bundled differently)"
          else
            echo "‚úÖ requirements.txt found"
          fi
          
          # Verify Applications symlink
          if [ ! -L "$mount_point/Applications" ]; then
            echo "‚ùå Applications symlink missing"
            hdiutil detach "$mount_point" || true
            exit 1
          fi
          echo "‚úÖ Applications symlink found"
          
          # Check for installation instructions
          if [ -f "$mount_point/Installation Instructions.txt" ]; then
            echo "‚úÖ Installation instructions found"
          else
            echo "‚ö†Ô∏è  Installation instructions missing"
          fi
          
          # Test app bundle validation (basic)
          echo "üîç Running basic app bundle validation..."
          if ! codesign --verify --deep --strict "$app_bundle" 2>/dev/null; then
            echo "‚ö†Ô∏è  App bundle not code signed (expected for open source)"
          else
            echo "‚úÖ App bundle code signature valid"
          fi
          
          # Test Info.plist parsing
          echo "üìã Validating Info.plist..."
          if ! plutil -lint "$app_bundle/Contents/Info.plist" >/dev/null 2>&1; then
            echo "‚ùå Info.plist is malformed"
            hdiutil detach "$mount_point" || true
            exit 1
          fi
          echo "‚úÖ Info.plist is valid"
          
          # Extract and verify version info
          bundle_version=$(plutil -extract CFBundleShortVersionString raw "$app_bundle/Contents/Info.plist" 2>/dev/null || echo "unknown")
          echo "üì¶ Bundle version: $bundle_version"
          
          # Test executable basic functionality (dry run)
          echo "üß™ Testing executable basic functionality..."
          if timeout 10s "$app_bundle/Contents/MacOS/BitcoinSoloMinerMonitor" --help >/dev/null 2>&1; then
            echo "‚úÖ Executable responds to --help"
          else
            echo "‚ö†Ô∏è  Executable doesn't respond to --help (may be normal)"
          fi
          
          # Unmount DMG
          echo "üì§ Unmounting DMG..."
          if ! hdiutil detach "$mount_point"; then
            echo "‚ö†Ô∏è  Warning: Could not unmount cleanly"
            hdiutil detach "$mount_point" -force || true
          fi
          
          echo "‚úÖ macOS installer test completed successfully"
        else
          echo "‚ùå No macOS DMG file found in artifacts"
          exit 1
        fi
      
    - name: Test Linux packages
      if: matrix.os == 'ubuntu-latest'
      run: |
        deb_file=$(find artifacts/linux-packages -name "*.deb" | head -1)
        if [ -n "$deb_file" ]; then
          echo "Testing Linux package: $(basename "$deb_file")"
          # Test package installation (dry run)
          sudo dpkg --dry-run -i "$deb_file"
          if [ $? -eq 0 ]; then
            echo "‚úì Linux package test passed"
          else
            echo "‚úó Linux package test failed"
            exit 1
          fi
        fi

  create-release:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs: [build-windows, build-macos, build-linux, validate-macos, test-installers]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
        
    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        
        # Copy Windows installer
        cp artifacts/windows-installer/*.exe release-assets/ 2>/dev/null || true
        
        # Copy macOS installer
        cp artifacts/macos-installer/*.dmg release-assets/ 2>/dev/null || true
        
        # Copy Linux packages
        cp artifacts/linux-packages/*.deb release-assets/ 2>/dev/null || true
        cp artifacts/linux-packages/*.rpm release-assets/ 2>/dev/null || true
        cp artifacts/linux-packages/*.AppImage release-assets/ 2>/dev/null || true
        
        # Combine checksums
        cat artifacts/*/SHA256SUMS > release-assets/SHA256SUMS 2>/dev/null || true
        
        # List release assets
        echo "Release assets:"
        ls -la release-assets/
      
    - name: Generate release notes
      id: release_notes
      run: |
        VERSION=${{ needs.build-windows.outputs.version }}
        echo "## Bitcoin Solo Miner Monitor v${VERSION}" > release_notes.md
        echo "" >> release_notes.md
        echo "### Downloads" >> release_notes.md
        echo "" >> release_notes.md
        
        # Add download links for each platform
        for file in release-assets/*; do
          if [ -f "$file" ] && [ "$(basename "$file")" != "SHA256SUMS" ]; then
            filename=$(basename "$file")
            echo "- **${filename}**" >> release_notes.md
          fi
        done
        
        echo "" >> release_notes.md
        echo "### Verification" >> release_notes.md
        echo "" >> release_notes.md
        echo "All downloads include SHA256 checksums for verification. Download the \`SHA256SUMS\` file and verify your download:" >> release_notes.md
        echo "" >> release_notes.md
        echo "\`\`\`bash" >> release_notes.md
        echo "# On Windows (PowerShell):" >> release_notes.md
        echo "Get-FileHash -Algorithm SHA256 <filename>" >> release_notes.md
        echo "" >> release_notes.md
        echo "# On macOS/Linux:" >> release_notes.md
        echo "shasum -a 256 <filename>" >> release_notes.md
        echo "\`\`\`" >> release_notes.md
        echo "" >> release_notes.md
        echo "### Installation Instructions" >> release_notes.md
        echo "" >> release_notes.md
        echo "- **Windows**: Download the .exe file and run it. Windows may show an \"Unknown Publisher\" warning - this is normal for open-source software." >> release_notes.md
        echo "- **macOS**: Download the .dmg file, open it, and drag the application to your Applications folder." >> release_notes.md
        echo "- **Linux**: Download the appropriate package (.deb for Ubuntu/Debian, .rpm for Fedora/CentOS, or .AppImage for universal compatibility)." >> release_notes.md
        
        # Set output for GitHub release
        echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
        cat release_notes.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
      
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Bitcoin Solo Miner Monitor ${{ needs.build-windows.outputs.version }}
        body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
        files: release-assets/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  security-scan:
    needs: [build-windows, build-macos, build-linux, validate-macos]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
        
    - name: Run security scan
      run: |
        echo "Running security scans on generated installers..."
        
        # Verify checksums
        echo "Verifying checksums..."
        for checksum_file in artifacts/*/SHA256SUMS; do
          if [ -f "$checksum_file" ]; then
            echo "Checking $(dirname "$checksum_file"):"
            cd "$(dirname "$checksum_file")"
            sha256sum -c SHA256SUMS || echo "Checksum verification failed for $(dirname "$checksum_file")"
            cd - > /dev/null
          fi
        done
        
        # Check file sizes (basic sanity check)
        echo "Checking installer file sizes..."
        find artifacts -name "*.exe" -o -name "*.dmg" -o -name "*.deb" -o -name "*.rpm" -o -name "*.AppImage" | while read file; do
          size=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file" 2>/dev/null || echo "0")
          if [ "$size" -lt 1000000 ]; then  # Less than 1MB is suspicious
            echo "‚ö†Ô∏è  Warning: $file is only $size bytes"
          else
            echo "‚úì $file: $size bytes"
          fi
        done
        
        echo "Security scan completed"